AWSTemplateFormatVersion: '2010-09-09'
Description: 'DockerMasteryApp - ECS Task Definitions and Services'

Parameters:
  StackName:
    Type: String
    Description: Name of the infrastructure stack
  
  FrontendImage:
    Type: String
    Description: Docker image for frontend
    Default: "your-account.dkr.ecr.us-east-1.amazonaws.com/dockermastery-frontend:latest"
  
  BackendImage:
    Type: String
    Description: Docker image for backend
    Default: "your-account.dkr.ecr.us-east-1.amazonaws.com/dockermastery-backend:latest"
  
  Environment:
    Type: String
    Default: production
    AllowedValues: [development, staging, production]

Resources:
  # Frontend Task Definition
  FrontendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${StackName}-frontend"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: 
        Fn::ImportValue: !Sub "${StackName}-execution-role"
      TaskRoleArn:
        Fn::ImportValue: !Sub "${StackName}-task-role"
      ContainerDefinitions:
        - Name: frontend
          Image: !Ref FrontendImage
          Essential: true
          PortMappings:
            - ContainerPort: 3000
              Protocol: tcp
          Environment:
            - Name: NODE_ENV
              Value: !Ref Environment
            - Name: VITE_API_URL
              Value: !Sub 
                - "http://${ALBDNSName}"
                - ALBDNSName: 
                    Fn::ImportValue: !Sub "${StackName}-alb-dns"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "/aws/ecs/${StackName}/frontend"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          HealthCheck:
            Command: ['CMD-SHELL', 'curl -f http://localhost:3000 || exit 1']
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60

  # Backend Task Definition
  BackendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${StackName}-backend"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 512
      Memory: 1024
      ExecutionRoleArn:
        Fn::ImportValue: !Sub "${StackName}-execution-role"
      TaskRoleArn:
        Fn::ImportValue: !Sub "${StackName}-task-role"
      ContainerDefinitions:
        - Name: backend
          Image: !Ref BackendImage
          Essential: true
          PortMappings:
            - ContainerPort: 5000
              Protocol: tcp
          Environment:
            - Name: NODE_ENV
              Value: !Ref Environment
            - Name: PORT
              Value: "5000"
            - Name: DB_HOST
              Value: 
                Fn::ImportValue: !Sub "${StackName}-db-endpoint"
            - Name: DB_PORT
              Value: "5432"
            - Name: DB_NAME
              Value: dockermastery
            - Name: DB_USER
              Value: postgres
            - Name: DB_PASSWORD
              Value: !Ref DBPassword
            - Name: REDIS_HOST
              Value:
                Fn::ImportValue: !Sub "${StackName}-redis-endpoint"
            - Name: REDIS_PORT
              Value: "6379"
            - Name: FRONTEND_URL
              Value: !Sub 
                - "http://${ALBDNSName}"
                - ALBDNSName: 
                    Fn::ImportValue: !Sub "${StackName}-alb-dns"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "/aws/ecs/${StackName}/backend"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          HealthCheck:
            Command: ['CMD-SHELL', 'curl -f http://localhost:5000/health || exit 1']
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60

  # Frontend Service
  FrontendService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub "${StackName}-frontend"
      Cluster: 
        Fn::ImportValue: !Sub "${StackName}-ecs-cluster"
      TaskDefinition: !Ref FrontendTaskDefinition
      DesiredCount: 2
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - Fn::ImportValue: !Sub "${StackName}-ecs-sg"
          Subnets:
            - Fn::Select: [0, Fn::Split: [',', Fn::ImportValue: !Sub "${StackName}-private-subnets"]]
            - Fn::Select: [1, Fn::Split: [',', Fn::ImportValue: !Sub "${StackName}-private-subnets"]]
          AssignPublicIp: DISABLED
      LoadBalancers:
        - ContainerName: frontend
          ContainerPort: 3000
          TargetGroupArn: 
            Fn::ImportValue: !Sub "${StackName}-frontend-tg"
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        RollingUpdateConfig:
          MaximumPercent: 200
          MinimumHealthyPercent: 100
      HealthCheckGracePeriodSeconds: 300
      Tags:
        - Key: Name
          Value: !Sub "${StackName}-frontend-service"

  # Backend Service
  BackendService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub "${StackName}-backend"
      Cluster: 
        Fn::ImportValue: !Sub "${StackName}-ecs-cluster"
      TaskDefinition: !Ref BackendTaskDefinition
      DesiredCount: 2
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - Fn::ImportValue: !Sub "${StackName}-ecs-sg"
          Subnets:
            - Fn::Select: [0, Fn::Split: [',', Fn::ImportValue: !Sub "${StackName}-private-subnets"]]
            - Fn::Select: [1, Fn::Split: [',', Fn::ImportValue: !Sub "${StackName}-private-subnets"]]
          AssignPublicIp: DISABLED
      LoadBalancers:
        - ContainerName: backend
          ContainerPort: 5000
          TargetGroupArn: 
            Fn::ImportValue: !Sub "${StackName}-backend-tg"
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        RollingUpdateConfig:
          MaximumPercent: 200
          MinimumHealthyPercent: 100
      HealthCheckGracePeriodSeconds: 300
      Tags:
        - Key: Name
          Value: !Sub "${StackName}-backend-service"

  # Auto Scaling Target - Frontend
  FrontendScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 10
      MinCapacity: 2
      ResourceId: !Sub "service/${StackName}-cluster/${StackName}-frontend"
      RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/application-autoscaling-ecs-service"
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  # Auto Scaling Policy - Frontend
  FrontendScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "${StackName}-frontend-scaling-policy"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref FrontendScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70.0
        ScaleOutCooldown: 300
        ScaleInCooldown: 300

  # Auto Scaling Target - Backend
  BackendScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 10
      MinCapacity: 2
      ResourceId: !Sub "service/${StackName}-cluster/${StackName}-backend"
      RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/application-autoscaling-ecs-service"
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  # Auto Scaling Policy - Backend
  BackendScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "${StackName}-backend-scaling-policy"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref BackendScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70.0
        ScaleOutCooldown: 300
        ScaleInCooldown: 300

Parameters:
  DBPassword:
    Type: String
    NoEcho: true
    Description: Password for RDS PostgreSQL instance
    MinLength: 8

Outputs:
  FrontendServiceArn:
    Description: Frontend ECS Service ARN
    Value: !Ref FrontendService
    Export:
      Name: !Sub "${StackName}-frontend-service-arn"

  BackendServiceArn:
    Description: Backend ECS Service ARN
    Value: !Ref BackendService
    Export:
      Name: !Sub "${StackName}-backend-service-arn"